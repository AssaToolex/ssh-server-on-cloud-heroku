"""

D. Генерация скобочных последовательностей

Дано целое число n. Требуется вывести все правильные скобочные
последовательности длины 2 ⋅ n, упорядоченные лексикографически
(см. https://ru.wikipedia.org/wiki/Лексикографический_порядок).

В задаче используются только круглые скобки.

Желательно получить решение, которое работает за время,
пропорциональное общему количеству правильных скобочных
последовательностей в ответе, и при этом использует объём памяти,
пропорциональный n.


Формат ввода

Единственная строка входного файла содержит целое число n, 0 ≤ n ≤ 11


Формат вывода

Выходной файл содержит сгенерированные правильные скобочные
последовательности, упорядоченные лексикографически.

Пример 1
Ввод:
2

Вывод:
(())
()()


Пример 2
Ввод:
3

Вывод:
((()))
(()())
(())()
()(())
()()()


Задача: D.Генерация скобочных последовательностей
Компилятор: Python 3.7.3
Вердикт: Неверный ответ
Статус: Частичное решение
	№	Вердикт	Ресурсы	Баллы
	1	ok	46ms / 3.98Mb	-
	2	ok	47ms / 3.95Mb	-
	3	ok	44ms / 3.97Mb	-
	4	ok	46ms / 3.96Mb	-
	5	ok	46ms / 3.96Mb	-
	6	ok	46ms / 3.96Mb	-
	7	wrong-answer	46ms / 3.96Mb	-

"""

import sys


def generator_04(n :int, l :list):
    if n < 1:
        return
    if n == 1:
        l.append('()')
        return
    if n == 2:
        for i in range(len(l)):
            v = l[i]
            l[i] = '({x})'.format(x=v)
            l.append('{x}()'.format(x=v))
        return
    #end_pos = len(l)-1
    for i in range(len(l)):
        v = l[i]
        l[i] = '({x})'.format(x=v)
        l.append('{x}()'.format(x=v))
        #if i < end_pos:
        l.append('(){x}'.format(x=v))


a_len = sys.stdin.readline().strip()
a_list = list()

for y in range(int(a_len)+1):
    # print("y:", y)
    generator_04(n=y, l=a_list)
    # print("a_list:", a_list)
    a_list = list(sorted(set(a_list)))

#for y in a_list:
#    print(y)
print(len(a_list))
