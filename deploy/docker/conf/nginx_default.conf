#!/bin/bash

# Use \$ for Nginx-variables

cat <<EOF

server {
    server_name ${SERVER_DOMAIN_NAME};
    listen ${PORT};
    listen [::]:${PORT};

    # return 302 https://\$server_name\$request_uri;
    access_log /dev/stdout;
    error_log /dev/stdout info;

    # favicon.ico
    location = /favicon.ico { alias /conf/favicon.ico; }
    # robots.txt
    location = /robots.txt { alias /conf/robots.txt; }

    location / {
        try_files \$uri \$uri/ =404;
        # root   /usr/share/nginx/html;
        root /var/www/html;
        index  index.html index.htm default.htm;
    }

    # redirect server error pages to the static page /404.html
    #
    error_page  404              /404.html;
    location = /404.html {
        root   /usr/share/nginx/html;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # favicon.ico
    # location = /favicon.ico { alias conf.d/favicon.ico; }
    # robots.txt
    # location = /robots.txt { alias conf.d/robots.txt; }

    location /ping {
        return 200 'PONG';
        add_header Content-Type text/plain;
    }

    location /zoom/ {
        proxy_pass http://127.0.0.1:3128;
        proxy_set_header Host \$host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_redirect off;
        proxy_buffering off;
    }
    
}

server {

    access_log /dev/stdout;
    error_log /dev/stdout info;


    # SSL configuration

    #server_name  rko.find-best.ru;
    listen 8443 ssl http2;
    listen [::]:8443 ssl http2;


    # $ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout private-nginx-selfsigned.key -out certs-nginx-selfsigned.crt
    ssl_certificate /conf/certs-nginx-selfsigned.crt;
    ssl_certificate_key /conf/private-nginx-selfsigned.key;


    # from https://cipherli.st/
    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    # Disable preloading HSTS for now.  You can use the commented out header line that includes
    # the "preload" directive if you understand the implications.
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    # file non found # ssl_dhparam /etc/ssl/certs/dhparam.pem;


    location / {
        try_files \$uri \$uri/ =404;
        # root   /usr/share/nginx/html;
        root /var/www/html;
        index  index.html index.htm default.htm;
    }

    # redirect server error pages to the static page /404.html
    #
    error_page  404              /404.html;
    location = /404.html {
        root   /usr/share/nginx/html;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # favicon.ico
    # location = /favicon.ico { alias conf.d/favicon.ico; }
    # robots.txt
    # location = /robots.txt { alias conf.d/robots.txt; }

    location /ping {
        return 200 'PONG';
        add_header Content-Type text/plain;
    }

    location /zoom/ {
        proxy_pass http://127.0.0.1:3128;
        proxy_set_header Host \$host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_redirect off;
        proxy_buffering off;
    }
}

EOF
